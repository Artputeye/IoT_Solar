document.addEventListener("DOMContentLoaded", function () {
  fetch('/getsetting')
    .then(response => response.json())
    .then(data => {
      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ select
      for (const key in data) {
        const selectElement = document.getElementById(key);
        if (selectElement && selectElement.tagName === "SELECT") {
          const valueToSelect = data[key];
          for (const option of selectElement.options) {
            if (option.value.toLowerCase() === valueToSelect.toLowerCase()) {
              selectElement.value = option.value;
              break;
            }
          }
        }
      }

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ checkbox
      for (const key in data) {
        const checkbox = document.getElementById(key);
        if (checkbox && checkbox.type === "checkbox") {
          checkbox.checked = data[key] === "1";
        }
      }

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ input number (gridCutOff, gridStart)
      for (const key in data) {
        const numberInput = document.getElementById(key);
        if (numberInput && numberInput.type === "number") {
          numberInput.value = data[key];
        }
      }

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Grid Tie Auto
      const gridTieAuto = document.getElementById("Grid Tie Auto");
      const gridTieOp = document.getElementById("Grid Tie Operation");
      if (gridTieAuto && gridTieOp) {
        const autoEnabled = data["Grid Tie Auto"] === "1";
        gridTieOp.disabled = autoEnabled; // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ auto = 1
        gridTieOp.parentElement.classList.toggle("disabled", autoEnabled);
      }
    })
    .catch(error => {
      console.error("Error fetching toggle data:", error);
    });
});

function toggleSetting(checkbox, settingName) {
  const status = checkbox.checked ? 1 : 0;
  console.log(`${settingName} ${status}`);

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Grid Tie Auto ‚Üí ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏° Grid Tie Operation
  if (settingName === "Grid Tie Auto") {
    const gridTieOp = document.getElementById("Grid Tie Operation");
    if (gridTieOp) {
      gridTieOp.disabled = checkbox.checked;
      gridTieOp.parentElement.classList.toggle("disabled", checkbox.checked);
    }
  }
  settingToserver(settingName, status);
}

// ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ Toggle ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
function settingToserver(settingName, state) {
  console.log(`${settingName} has been toggled to ${state}`);

  fetch('/setting', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      setting: settingName,   // ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ä‡∏∑‡πà‡∏≠
      value: state
    }),
  })
    .then(response => response.text())
    .then(result => {
      console.log(`‚úÖ Toggle ${settingName} updated to ${state}`);
      console.log("Respond:", result);
    })
    .catch(error => {
      console.error("‚ùå Error:", error);
    });

  submitAllSettings();
}

//‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ dropdown ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
function sendSetting(data) {
  const container = data.closest('.setting-dropdown');
  const settingType = container.getAttribute('data-setting');
  const value = container.querySelector('select').value;

  fetch('/setting', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ setting: settingType, value }),
  })
    .then(response => response.text())
    .then(data => {
      console.log(`‚úÖ Setting ${settingType} updated to ${value}`);
    })
    .catch(error => {
      console.error('‚ùå Error:', error);
    });
  submitAllSettings();
}

function submitAllSettings() {
  const data = {};

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å toggle switch ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  document.querySelectorAll('input[type="checkbox"]').forEach(input => {
    const id = input.id;
    if (id) {
      data[id] = input.checked ? "1" : "0";
    }
  });

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    document.querySelectorAll('input[type="number"]').forEach(input => {
    const id = input.id;
    if (id) {
      data[id] = input.value;
    }
  });

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å dropdown ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  document.querySelectorAll('select').forEach(select => {
    const id = select.id;
    if (id) {
      data[id] = select.value;   // <-- ‡πÉ‡∏ä‡πâ value ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text
    }
  });

  console.log("Successed:", data);

  // ‡∏™‡πà‡∏á JSON ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ESP32
  fetch('/savesetting', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  })
    .then(response => response.text())
    .then(result => {
      console.log("Successed:", result);
    })
    .catch(error => {
      console.error("Error:", error);
    });
}

function restoreDefaults() {
  console.log("‚ö†Ô∏è Restoring defaults...");

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï dropdown ‚Üí ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å
  document.querySelectorAll('select').forEach(select => {
    if (select.options.length > 0) {
      select.selectedIndex = 0;
    }
  });

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï toggle switch ‚Üí 0
  document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
    cb.checked = false;
  });

  // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏õ‡∏¢‡∏±‡∏á ESP32
  settingToserver("RestoreDefaults", 1)
  submitAllSettings();
  alert("‚úÖ Settings restored to defaults.");
}


function GridCutToServer() {
  const gridCutOff = parseInt(document.getElementById('gridCutOff').value);
  const gridStart = parseInt(document.getElementById('gridStart').value);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1‚Äì31
  if (isNaN(gridCutOff) || isNaN(gridStart)) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á');
    return;
  }
  if (gridCutOff < 1 || gridCutOff > 31 || gridStart < 1 || gridStart > 31) {
    alert('‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á 31 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    return;
  }
  console.log(`üì§ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ server: gridCutOff=${gridCutOff}, gridStart=${gridStart}`);
  fetch('/setting', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ gridCutOff, gridStart })
  })
    .then(res => res.text())
    .then(result => {
      console.log('‚úÖ Respond:', result);
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    })
    .catch(err => {
      console.error('‚ùå Error:', err);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
    });
      submitAllSettings();
}